syntax for initializing members of the class and it is valid when using constructors. 
It is called initializer list and it follows the general syntax:

class_name(type1 arg1, type2 arg2, type3 arg3): member1(arg1), member2(arg2), member3(arg3){}

Instead of assignation:

class_name(type1 arg1, type2 arg2, type3 arg3){member1 = arg1; member2 = arg2; member3 = arg3}

There is a subtle difference between this two at implementation level, making initializations more efficient.

class Student{
    private:
        std::vector<int> scores;
        int sumofScores;
    public:
        Student() : scores(5,0), sumofScores(0) {};

---------------------------------------------------------------------------------------------------------------------------------------

C++ provides an inline functions to reduce the function call overhead. Inline function is a function that is expanded in line when it is called. When the inline function is called whole code of the inline function gets inserted or substituted at the point of inline function call. This substitution is performed by the C++ compiler at compile time. 
Inline function may increase efficiency if it is small.
The syntax for defining the function inline is:

inline return-type function-name(parameters)
{
    // function code
}  

---------------------------------------------------------------------------------------------------------------------------------------
Protected access modifier is similar to that of private access modifiers. 
The data members and member functions declared public can be accessed by other classes too. 
The class member declared as Protected are inaccessible outside the class but they can be accessed by any subclass(derived class) of that class

---------------------------------------------------------------------------------------------------------------------------------------
Virtual functions: 
https://www.youtube.com/watch?v=-noYyWtdXSI&t=867s
Virtual void function_name() = 0; //pure Virtual function, do nothing function
pure Virtual function used to make abstract base class
---------------------------------------------------------------------------------------------------------------------------------------